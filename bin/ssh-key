#!/bin/bash

USERNAME=$1
PUBKEY="$2 $3 $4"

if [[ -z "${PUBKEY// }" ]]; then
	exit 1
fi

# Will be set if a key with the same fingerprint is already present
SKIP_KEY=0
FOUND_KEY=0

KEYFILE="/tmp/${USERNAME}.pub"

# Echo the key to /tmp, then try to take its fingerprint with ssh-keygen
# Trying to take the fingerprint will fail if the key is invalid
PUBKEY_LINE="no-port-forwarding,no-pty,command=\"login ${USERNAME}\" ${PUBKEY}"
echo $PUBKEY_LINE > ${KEYFILE}
NEW_KEY_FP=$(ssh-keygen -l -f ${KEYFILE} | cut -f 1,2 -d' ')
if [ $? -ne 0 ]; then
	echo "ssh key not valid"
	rm $KEYFILE
	exit 1
fi

NEW_KEYS=""
if [ -f .ssh/authorized_keys ]; then
	while IFS='' read -r key || [[ -n "$line" ]]; do
		if [ "$key" == "" ]; then
			continue
		fi

		echo $key > /tmp/comparekey.pub
		EXISTING_FP=$(ssh-keygen -l -f /tmp/comparekey.pub | cut -f 1,2 -d' ')
		if [ "$NEW_KEY_FP" == "$EXISTING_FP" ]; then
			if [[ ! "$key" =~ "^port-forwarding,no-pty,command" ]]; then
				echo "Key ${NEW_KEY_FP} was root"
				NEW_KEYS="${PUBKEY_LINE}\n${NEW_KEYS}"
				FOUND_KEY=1
			else
				SKIP_KEY=1
			fi
		else
			NEW_KEYS="${key}\n${NEW_KEYS}"
		fi
	done < .ssh/authorized_keys
fi
rm -f /tmp/comparekey.pub

if [ $FOUND_KEY -eq 0 ]; then
	NEW_KEYS="${PUBKEY_LINE}\n${NEW_KEYS}"
fi

if [ $SKIP_KEY -eq 0 ]; then
	echo "Adding key ${NEW_KEY_FP}..."
	echo -e $NEW_KEYS > .ssh/authorized_keys
	git-shell-commands/backup
fi

rm -f $KEYFILE
#!/bin/bash

# Generate keypairs for protecting secrets

KEY_SIZE=4096

KEY_NAME=$1
if [ -z "${KEY_NAME}" ]; then
	echo "Usage: $0 key_name [optional extra args]"
	exit 1
fi


ensure_key() {
	local key_name=$1
	local key_usage=${2-default}
	local unique=${3-false}
	{
		flock -x 200
		EXISTING_KEYS=$(gpg2 --list-keys ${key_name} >/dev/null 2>&1)
		if [ $? -ne 0 ]; then
			generate_key ${key_name} ${key_usage}
		elif [ "${unique}" == "true" ]; then
			echo "Key '${key_name}' already exists."
			exit 1
		fi
	} 200>keygen
}

generate_key() {
	local key_name=$1
	local key_usage=$2
	# Reference: https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html
	echo "
%no-ask-passphrase
Key-Type: RSA
Key-Length: ${KEY_SIZE}
Key-Usage: ${key_usage}
Subkey-Type: RSA
Subkey-Length: ${KEY_SIZE}
Subkey-Usage: ${key_usage}
Name-Real: ${key_name}
Expire-Date: 0
%commit
" | gpg2 --batch --gen-key -

	git-shell-commands/backup
}

ensure_key git-deploy sign
ensure_key ${KEY_NAME} encrypt true

git-shell-hooks/post-generate-key $@